#version 460
#extension GL_GOOGLE_include_directive : require
#include "../common.glsl"
#include "../../../src/rendering_backend/glsl_common.h"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 3, binding = 0) uniform sampler2D albedo;
layout(set = 3, binding = 1) uniform sampler2D world_space_normals_and_object_ids;
layout(set = 3, binding = 2) uniform sampler2D motion_vectors_and_metallic_roughness;
layout(set = 3, binding = 3) uniform sampler2D depth;
layout(set = 3, binding = 4, r16f) writeonly uniform image2D screen_space_reflections;

layout(push_constant) uniform PushConstants { SSRPushConstants pc; };

vec2 view_space_to_screen_coordinates(vec3 v) {
	vec4 clip_space = pfd.camera_proj * vec4(v, 1.0);
	clip_space.xy /= clip_space.w;
	return (clip_space.xy * 0.5 + 0.5) * pfd.display_size;
}

vec2 world_space_to_uv(vec3 v) {
	vec4 clip_space = pfd.camera_proj * pfd.camera_view * vec4(v, 1.0);
	clip_space.xy /= clip_space.w;
	return (clip_space.xy * 0.5 + 0.5);
}

vec3 compute_lighting(vec2 uv) {
	vec3 albedo = texture(albedo, uv).rgb;
	vec3 position = get_world_space_position(texture(depth, uv).x, uv);
	vec2 metallic_roughness = texture(motion_vectors_and_metallic_roughness, uv).zw;
		
	vec3 camera_position = vec3(pfd.camera_view_inverse[3].xyz);
	vec3 V = normalize(camera_position - position);
	vec3 L = -pfd.directional_light.direction.xyz;
	vec3 N = texture(world_space_normals_and_object_ids, uv).xyz;
	vec3 H = normalize(L + V);
		
	float min_roughness = 0.04;
	float metallic = clamp(metallic_roughness.x, 0.0, 1.0);
	float roughness = clamp(metallic_roughness.y, min_roughness, 1.0);
		
	// Assume quite low ambient contribution, 
	// in reality would need to trace AO rays, but too expensive
	float ambient_factor = PI_INVERSE * 0.2;
	vec3 light_intensity = pfd.directional_light.intensity.xyz;
	vec3 light_color = pfd.directional_light.color.rgb;
		
	vec3 f0 = vec3(0.04);
	f0 = mix(f0, albedo, metallic);
	vec3 F = fresnel_schlick(f0, H, V);
		
	vec3 ambient_lighting = albedo * ambient_factor;
	vec3 diffuse_lighting = diffuse_brdf(metallic, albedo, F);
	vec3 specular_lighting = specular_brdf(roughness, F, V, L, N, H);
	vec3 lighting = ambient_lighting + (diffuse_lighting + specular_lighting) * max(dot(N, L), 0.0) * light_intensity * light_color;

	return lighting;
}

void main() {
	imageStore(
		screen_space_reflections,
		ivec2(gl_GlobalInvocationID.xy),
		vec4(0.0)
	);

	vec2 coords = ivec2(gl_GlobalInvocationID.xy) * pfd.display_size_inverse;
	float fragment_depth = texture(depth, coords).x;

	vec3 camera_position = vec3(pfd.camera_view_inverse[3].xyz);
	vec3 P = get_world_space_position(fragment_depth, coords);
	vec3 N = texture(world_space_normals_and_object_ids, coords).xyz;
	vec3 I = normalize(P - camera_position);
	vec3 reflected_dir = normalize(reflect(I, N));

	// If the reflected ray points "approximately towards" the camera
	if(dot(I, reflected_dir) < -0.2) {
		return;
	}

	float prev_step = 0.0;
	float final_step = 0.0;
	for(int i = 0; i < int(pc.ray_distance / pc.step_size); ++i) {
		float offset = pc.step_size * i;
		vec3 ray_position = P + reflected_dir * offset;
		float distance_to_ray = distance(camera_position, ray_position);

		vec2 sample_uv = world_space_to_uv(ray_position);
		vec3 screen_position = get_world_space_position(texture(depth, sample_uv).x, sample_uv);
		float distance_to_screen = distance(camera_position, screen_position);
		float delta_distance = distance_to_ray - distance_to_screen;

		if(delta_distance > 0.3 && delta_distance < pc.thickness) {
			final_step = offset;
			break;
		}
		else {
			prev_step = offset;
		}
	}

	// Binary search
	float mid_step = (prev_step + final_step) * 0.5;
	vec2 final_uv = vec2(0.0);
	for(int i = 0; i < pc.bsearch_steps; ++i) {
		float offset = mid_step;
		vec3 ray_position = P + reflected_dir * offset;
		float distance_to_ray = distance(camera_position, ray_position);

		final_uv = world_space_to_uv(ray_position);
		vec3 screen_position = get_world_space_position(texture(depth, final_uv).x, final_uv);
		float distance_to_screen = distance(camera_position, screen_position);
		float delta_distance = distance_to_ray - distance_to_screen;

		if(delta_distance > 0.3 && delta_distance < pc.thickness) {
			mid_step = (prev_step + mid_step) * 0.5;
		}
		else {
			float tmp = mid_step;
			mid_step = (mid_step * 1.5 - prev_step * 0.5);
			prev_step = tmp;
		}
	}

	imageStore(
		screen_space_reflections,
		ivec2(gl_GlobalInvocationID.xy),
		vec4(compute_lighting(final_uv), 1.0)
	);
}
