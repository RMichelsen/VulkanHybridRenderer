#version 460
#extension GL_GOOGLE_include_directive : require
#include "../common.glsl"
#include "../../../src/rendering_backend/glsl_common.h"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 3, binding = 0, r16f) readonly uniform image2D world_space_normals_and_linear_depths;
layout(set = 3, binding = 1, r16f) readonly uniform image2D motion_vectors_and_metallic_roughness;
layout(set = 3, binding = 2) uniform sampler2D depth;
layout(set = 3, binding = 3, r16f) readonly uniform image2D raytraced_shadow_and_ao_texture;
layout(set = 3, binding = 4, r16f) writeonly uniform image2D denoised_raytraced_shadow_and_ao;

layout(push_constant) uniform PushConstants { SVGFPushConstants pc; };

// Returns vec2(shadow, AO)
vec2 gauss_3x3_filter(ivec2 coords) {
	float gauss_weights[] = {
		1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0,
		1.0 / 8.0,  1.0 / 4.0, 1.0 / 8.0,
		1.0 / 16.0, 1.0 / 8.0, 1.0 / 16.0
	};

	vec2 filtered_shadow_and_ao = vec2(0.0);
	for(int y = -1; y <= 1; ++y) {
		for(int x = -1; x <= 1; ++x) {
			ivec2 sample_coords = coords + ivec2(x, y);
			if(sample_coords.x < 0 || sample_coords.x >= pfd.display_size.x ||
			   sample_coords.y < 0 || sample_coords.y >= pfd.display_size.y) continue;

			float weight = gauss_weights[3 * (y + 1) + (x + 1)];

			filtered_shadow_and_ao += weight * imageLoad(storage_images[pc.integrated_shadow_and_ao[0]], sample_coords).zw;
		}
	}

	return filtered_shadow_and_ao;
}

float edge_stopping_depth(float linear_depth_p, float linear_depth_q, float linear_depth_fwidth) {
	float e = abs(linear_depth_p - linear_depth_q) / max(linear_depth_fwidth, 1e-6);
	return exp(-e);
}

float edge_stopping_normal(vec3 normal_p, vec3 normal_q) {
	return max(0.0, pow(dot(normal_p, normal_q), 128.0));
}

float edge_stopping_luminance(float variance_p, float luminance_p, float luminance_q) {
	float e = abs(luminance_p - luminance_q) / (4.0 * sqrt(variance_p) + 1e-6);
	return exp(-e);
}

void main() {
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	vec4 normal_and_linear_depths_p = imageLoad(world_space_normals_and_linear_depths, coords);
	vec3 normal_p = oct_decode_to_vec3(normal_and_linear_depths_p.xy);
	float linear_depth_p = normal_and_linear_depths_p.z;
	float linear_depth_fwidth = normal_and_linear_depths_p.w;

	vec4 integrated_shadow_and_ao_p = imageLoad(storage_images[pc.integrated_shadow_and_ao[0]], coords);
	vec2 variance_p = gauss_3x3_filter(coords);
	vec2 luminance_p = vec2(rgb_to_luminance(vec3(integrated_shadow_and_ao_p.x)), rgb_to_luminance(vec3(integrated_shadow_and_ao_p.y)));

	float atrous_weights[] = {
		1.0 / 256.0, 1.0 / 64.0, 3.0 / 128.0, 1.0 / 64.0, 1 / 256.0,
		1.0 / 64.0 , 1.0 / 16.0, 3.0 / 32.0,  1.0 / 16.0, 1.0 / 64.0,
		3.0 / 128.0, 3.0 / 32.0, 9.0 / 64.0, 3.0 / 32.0, 3.0 / 128.0,
		1.0 / 64.0 , 1.0 / 16.0, 3.0 / 32.0,  1.0 / 16.0, 1.0 / 64.0,
		1.0 / 256.0, 1.0 / 64.0, 3.0 / 128.0, 1.0 / 64.0, 1 / 256.0
	};

	vec2 sum_w = vec2(1.0);
	vec4 sum_shadow_and_ao = integrated_shadow_and_ao_p;
	for(int y = -2; y <= 2; ++y) {
		for(int x = -2; x <= 2; ++x) {
			ivec2 sample_coords = coords + ivec2(x, y) * pc.atrous_step;
			if(sample_coords.x < 0 || sample_coords.x >= pfd.display_size.x ||
			   sample_coords.y < 0 || sample_coords.y >= pfd.display_size.y ||
			   (x == 0 && y == 0)) continue;

			vec4 integrated_shadow_and_ao_q = imageLoad(storage_images[pc.integrated_shadow_and_ao[0]], sample_coords);
			float kernel = atrous_weights[5 * (y + 2) + (x + 2)];

			vec4 normal_and_linear_depths_q = imageLoad(world_space_normals_and_linear_depths, sample_coords);
			vec3 normal_q = oct_decode_to_vec3(normal_and_linear_depths_q.xy);
			float linear_depth_q = normal_and_linear_depths_q.z;

			float weight_normal = edge_stopping_normal(normal_p, normal_q);
			float weight_depth = edge_stopping_depth(linear_depth_p, linear_depth_q, linear_depth_fwidth);

			vec2 w = vec2(kernel * weight_normal * weight_depth);
			w.x *= edge_stopping_luminance(variance_p.x, luminance_p.x, rgb_to_luminance(vec3(integrated_shadow_and_ao_q.x)));
			w.y *= edge_stopping_luminance(variance_p.y, luminance_p.y, rgb_to_luminance(vec3(integrated_shadow_and_ao_q.y)));

			sum_w += w;
			sum_shadow_and_ao += vec4(w.x, w.y, w.x * w.x, w.y * w.y) * integrated_shadow_and_ao_q;
		}
	}

	imageStore(
		storage_images[pc.integrated_shadow_and_ao[1]], 
		coords, 
		vec4(sum_shadow_and_ao / vec4(sum_w.x, sum_w.y, sum_w.x * sum_w.x, sum_w.y * sum_w.y))
	);
}
