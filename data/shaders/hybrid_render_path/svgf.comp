#version 460
#extension GL_GOOGLE_include_directive : require
#include "../common.glsl"
#include "../../../src/rendering_backend/glsl_common.h"

layout(local_size_x = 8, local_size_y = 8) in;

layout(set = 3, binding = 0, r16f) readonly uniform image2D reprojected_uv_and_depth_derivatives;
layout(set = 3, binding = 1, r16f) readonly uniform image2D position_texture;
layout(set = 3, binding = 2, r16f) readonly uniform image2D normal_texture;
layout(set = 3, binding = 3, r16f) readonly uniform image2D raytraced_shadows;
layout(set = 3, binding = 4, r16f) readonly uniform image2D raytraced_ambient_occlusion;
layout(set = 3, binding = 5, r16f) writeonly uniform image2D denoised_raytraced_shadows;
layout(set = 3, binding = 6, r16f) writeonly uniform image2D denoised_raytraced_ambient_occlusion;

layout(push_constant) uniform PushConstants { SVGFPushConstants pc; };

bool is_valid_reprojection(ivec2 prev_coords, int current_object_id, vec3 current_normal) {
	// Reject if coords is outside of display
	if(prev_coords.x < 0 || prev_coords.y < 0 ||
	   prev_coords.x >= pfd.display_size.x || prev_coords.y >= pfd.display_size.y) {
	   return false;
	}

	vec4 prev_normal_and_obj_id = imageLoad(storage_images[pc.prev_frame_normals_and_object_id], prev_coords);

	// Reject if object ID has changed
	int prev_object_id = int(prev_normal_and_obj_id.w);
	if(current_object_id == -1.0 || current_object_id != prev_object_id) {
		return false;
	}

	// Reject if normals aren't aligned
	// Merge metric from [Kerzner and Salvi 2014]
	vec3 prev_normal = prev_normal_and_obj_id.xyz;
	if(dot(current_normal, prev_normal) < COS_PI_4) {
		return false;
	}

	// Reject if depths 

	return true;
}

void main() {
	ivec2 coords = ivec2(gl_GlobalInvocationID.xy);
	vec4 current_normal_and_obj_id = imageLoad(normal_texture, coords);
	vec3 current_normal = current_normal_and_obj_id.xyz;
	int current_obj_id = int(current_normal_and_obj_id.w);
	vec4 reprojuv_and_depth_derivatives = imageLoad(reprojected_uv_and_depth_derivatives, coords);
	vec2 reprojected_uv = reprojuv_and_depth_derivatives.xy;
	vec4 current_shadow = imageLoad(raytraced_shadows, coords);
	vec4 current_ao = imageLoad(raytraced_ambient_occlusion, coords);
	int sample_age = int(imageLoad(storage_images[pc.shadow_moments_history], coords).z);

	// 2x2 bilinear tap filter
	vec2 prev_coords = reprojected_uv * pfd.display_size - vec2(0.5, 0.5);
	float x = fract(prev_coords.x);
	float y = fract(prev_coords.y);
	ivec2 prev_coords_aligned = ivec2(prev_coords);

	float bilinear_weights[4] = { (1 - x) * (1 - y), x * (1 - y), (1 - x) * y, x * y };
	ivec2 offsets[4] = { ivec2(0, 0), ivec2(1, 0), ivec2(0, 1), ivec2(1, 1) };

	vec4 prev_shadow = vec4(0.0);
	vec2 prev_shadow_moments = vec2(0.0);
	vec4 prev_ao = vec4(0.0);
	vec2 prev_ao_moments = vec2(0.0);
	float sum = 0.0;
	for(int i = 0; i < 4; ++i) {
		ivec2 sample_coords = prev_coords_aligned + offsets[i];
		if(is_valid_reprojection(sample_coords, current_obj_id, current_normal)) {
			prev_shadow += bilinear_weights[i] * imageLoad(storage_images[pc.shadow_history], sample_coords);
			prev_shadow_moments += bilinear_weights[i] * imageLoad(storage_images[pc.shadow_moments_history], sample_coords).xy;
			prev_ao += bilinear_weights[i] * imageLoad(storage_images[pc.ambient_occlusion_history], sample_coords);
			prev_ao_moments += bilinear_weights[i] * imageLoad(storage_images[pc.ambient_occlusion_moments_history], sample_coords).xy;
			sum += bilinear_weights[i];
		}
	}
	bool reprojection_valid = sum > 1e-6;

	// Retry with 3x3 filter if reprojection failed
	if(!reprojection_valid) {
		for(int y = -1; y <= 1; ++y) {
			for(int x = -1; x <= 1; ++x) {
				ivec2 sample_coords = prev_coords_aligned + ivec2(x, y);
				if(is_valid_reprojection(sample_coords, current_obj_id, current_normal)) {
					prev_shadow += imageLoad(storage_images[pc.shadow_history], sample_coords);
					prev_shadow_moments += imageLoad(storage_images[pc.shadow_moments_history], sample_coords).xy;
					prev_ao += imageLoad(storage_images[pc.ambient_occlusion_history], sample_coords);
					prev_ao_moments += imageLoad(storage_images[pc.ambient_occlusion_moments_history], sample_coords).xy;
					sum += 1.0;
				}	
			}
		}
		reprojection_valid = sum > 1e-6;
	}

	float shadow_luminance = rgb_to_luminance(current_shadow.rgb);
	vec2 shadow_moments = vec2(shadow_luminance, shadow_luminance * shadow_luminance);
	float ao_luminance = rgb_to_luminance(current_ao.rgb);
	vec2 ao_moments = vec2(ao_luminance, ao_luminance * ao_luminance);

	if(reprojection_valid) {
		sample_age = min(32, sample_age + 1);
		float alpha = max(0.1, 1.0 / float(sample_age));
		float moments_alpha = max(0.2, 1.0 / float(sample_age));

		prev_shadow /= sum;
		prev_shadow_moments /= sum;
		prev_ao /= sum;
		prev_ao_moments /= sum;
		shadow_moments = mix(prev_shadow_moments, shadow_moments, moments_alpha);
		ao_moments = mix(prev_ao_moments, ao_moments, moments_alpha);

		float shadow_variance = max(0.0, shadow_moments.y - shadow_moments.x * shadow_moments.x);
		imageStore(
			storage_images[pc.integrated_shadows[0]], 
			coords,
			vec4(mix(prev_shadow.rgb, current_shadow.rgb, alpha), shadow_variance)
		);

		float ao_variance = max(0.0, ao_moments.y - ao_moments.x * ao_moments.x);
		imageStore(
			storage_images[pc.integrated_ambient_occlusion[0]], 
			coords,
			vec4(mix(prev_ao.rgb, current_ao.rgb, alpha), ao_variance)
		);

	}
	else {
		sample_age = 0;

		float shadow_variance = max(0.0, shadow_moments.y - shadow_moments.x * shadow_moments.x);
		imageStore(
			storage_images[pc.integrated_shadows[0]], 
			coords,
			vec4(current_shadow.rgb, shadow_variance)
		);

		float ao_variance = max(0.0, ao_moments.y - ao_moments.x * ao_moments.x);
		imageStore(
			storage_images[pc.integrated_ambient_occlusion[0]], 
			coords,
			vec4(current_ao.rgb, ao_variance)
		);
	}

	// Save previous moments
	imageStore(
		storage_images[pc.shadow_moments_history], 
		coords,
		vec4(shadow_moments, sample_age, 0.0)
	);
	imageStore(
		storage_images[pc.ambient_occlusion_moments_history], 
		coords,
		vec4(ao_moments, 0.0, 0.0)
	);
}
